{
  "comments": [
    {
      "key": {
        "uuid": "c3ab3cbf_7ae5b4db",
        "filename": "style-guide.md",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1154069
      },
      "writtenOn": "2017-09-04T11:34:32Z",
      "side": 1,
      "message": "Since this applies equally to C and objc, add a new section, possibly named \"Build file conventions\", and move this text out of the C++ section.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 27
      },
      "revId": "c04ee4abfffbe0c8fa2121ba47e04f93dfcd9e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2e97a99_429400cf",
        "filename": "style-guide.md",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-09-04T11:57:39Z",
      "side": 1,
      "message": "Hmm. OK, but I doubt it\u0027ll make this rule easier to find. Have a look—I must confess I liked the old version better.",
      "parentUuid": "c3ab3cbf_7ae5b4db",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 27
      },
      "revId": "c04ee4abfffbe0c8fa2121ba47e04f93dfcd9e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7afbedb5_5ea8ee46",
        "filename": "style-guide.md",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1154069
      },
      "writtenOn": "2017-09-04T12:19:30Z",
      "side": 1,
      "message": "A think a wider scope section on build issues makes more sense than a section on the C preprocessor. The advice covers both the use of the preprocessor, and how to set up things in the BUILD files. And it seems more likely that BUILD file advice will need further expansion, than advice particular to the C preprocessor.",
      "parentUuid": "d2e97a99_429400cf",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 27
      },
      "revId": "c04ee4abfffbe0c8fa2121ba47e04f93dfcd9e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1273e7d_cf2c4e55",
        "filename": "style-guide.md",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1138974
      },
      "writtenOn": "2017-09-04T11:55:19Z",
      "side": 1,
      "message": "What are valid use cases for new compiler flags?\nMay be add few examples when it is a good idea (and few when it seems good, but actually bad idea).\n\nI\u0027m worried that by introducing this rule, we will make impression it is common to add those flags.",
      "range": {
        "startLine": 23,
        "startChar": 13,
        "endLine": 23,
        "endChar": 26
      },
      "revId": "c04ee4abfffbe0c8fa2121ba47e04f93dfcd9e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a5d0d97_bf6c2be1",
        "filename": "style-guide.md",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-09-04T12:10:02Z",
      "side": 1,
      "message": "That\u0027s what I was trying to impress by saying \"first, think long and hard\" and \"if you really, really do\". And for the same reasons, I don\u0027t think there should be examples of when it\u0027s OK—there should be a discussion each and every time...\n\nShould the text be more specific? Along the lines of, \"Avoid using the C preprocessor to conditionally enable or disable pieces of C++ code. But if you can\u0027t avoid it, introduce a gn variable...\"",
      "parentUuid": "f1273e7d_cf2c4e55",
      "range": {
        "startLine": 23,
        "startChar": 13,
        "endLine": 23,
        "endChar": 26
      },
      "revId": "c04ee4abfffbe0c8fa2121ba47e04f93dfcd9e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b241f79e_52e58c54",
        "filename": "style-guide.md",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1154069
      },
      "writtenOn": "2017-09-04T12:19:30Z",
      "side": 1,
      "message": "Among existing flags, maybe WEBRTC_POSIX and WEBRTC_USE_H264 are reasonable examples?",
      "parentUuid": "f1273e7d_cf2c4e55",
      "range": {
        "startLine": 23,
        "startChar": 13,
        "endLine": 23,
        "endChar": 26
      },
      "revId": "c04ee4abfffbe0c8fa2121ba47e04f93dfcd9e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "895f85c4_a918f559",
        "filename": "style-guide.md",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1138974
      },
      "writtenOn": "2017-09-04T14:53:27Z",
      "side": 1,
      "message": "May be then add a line \u0027require approval from ...\u0027 or \u0027should be first discussed in ...\u0027\n\nCurrent wording is subjective. I may think that thinking half an hour on it and fail to find another solution (or consider another solution too long) is good enough and use teammate to introduce a build flag.\n\n\nWEBRTC_POSIX feel like a reasonable flag (platform specific), but not something you likely to introduce.\nWEBRTC_USE_H264 (feature specific) feels like example when you shouldn\u0027t add a compile flag and solve it at link time with injectable codecs, even if that path is noticeably longer.",
      "parentUuid": "b241f79e_52e58c54",
      "range": {
        "startLine": 23,
        "startChar": 13,
        "endLine": 23,
        "endChar": 26
      },
      "revId": "c04ee4abfffbe0c8fa2121ba47e04f93dfcd9e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e915e4ca_6d852cc8",
        "filename": "style-guide.md",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1154069
      },
      "writtenOn": "2017-09-04T11:34:32Z",
      "side": 1,
      "message": "Maybe you can drop the example and shorten the explanation. The important thing is that we use -Wundef to tell the compiler to warn about use of undefined preprocessor symbols in #if directives, which is a context where they are otherwise silently replaced with 0.",
      "range": {
        "startLine": 48,
        "startChar": 10,
        "endLine": 48,
        "endChar": 12
      },
      "revId": "c04ee4abfffbe0c8fa2121ba47e04f93dfcd9e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0136afc_138538f0",
        "filename": "style-guide.md",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1126902
      },
      "writtenOn": "2017-09-04T11:57:39Z",
      "side": 1,
      "message": "I think we should keep the example. Even if it takes up some space, it reduces the time it takes to read and understand the rule.\n\nIs there some part of the explanation you think can be omitted, or said more succinctly?",
      "parentUuid": "e915e4ca_6d852cc8",
      "range": {
        "startLine": 48,
        "startChar": 10,
        "endLine": 48,
        "endChar": 12
      },
      "revId": "c04ee4abfffbe0c8fa2121ba47e04f93dfcd9e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcf30f57_820e81b1",
        "filename": "style-guide.md",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1154069
      },
      "writtenOn": "2017-09-04T12:19:30Z",
      "side": 1,
      "message": "\u003e Is there some part of the explanation you think can be omitted, or said more succinctly?\n\nI\u0027ll give it a try:\n\nUse #if when testing the flag, rather than #ifdef or #if defined. In combination with the -Wundef option to the compiler, this provides compile time warnings in case a preprocessor symbol is misspelled, or used without corresponding build rules to set it.\n\nBut if you think more words are needed to make this point clear, I won\u0027t insist.",
      "parentUuid": "b0136afc_138538f0",
      "range": {
        "startLine": 48,
        "startChar": 10,
        "endLine": 48,
        "endChar": 12
      },
      "revId": "c04ee4abfffbe0c8fa2121ba47e04f93dfcd9e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}