{
  "comments": [
    {
      "key": {
        "uuid": "d09837a9_db27de67",
        "filename": "webrtc/modules/desktop_capture/screen_drawer_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 54,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-08-16T01:23:14Z",
      "side": 1,
      "message": "Please add a comment explaining why you need something more complex than SleepMs(100) here.",
      "range": {
        "startLine": 54,
        "startChar": 51,
        "endLine": 54,
        "endChar": 0
      },
      "revId": "6c5fcb3a0afdee5ded662442d156e275ea5590a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3038518_779347c9",
        "filename": "webrtc/modules/desktop_capture/screen_drawer_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 54,
      "author": {
        "id": 1196069
      },
      "writtenOn": "2017-08-16T18:50:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d09837a9_db27de67",
      "range": {
        "startLine": 54,
        "startChar": 51,
        "endLine": 54,
        "endChar": 0
      },
      "revId": "6c5fcb3a0afdee5ded662442d156e275ea5590a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc27c9cb_f37f5818",
        "filename": "webrtc/modules/desktop_capture/screen_drawer_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-08-16T01:23:14Z",
      "side": 1,
      "message": "I don\u0027t understand this comment. CriticalSection isn\u0027t mentioned in this CL, and if it\u0027s an implementation detail of the code under test, you shouldn\u0027t be structuring your test around assumptions about anything that isn\u0027t part of the public interface.\n\nTBH, I think you can change this comment to read \"Wait for the lock to be created\", and perhaps add a timeout so it won\u0027t run forever (although there\u0027s already a test timeout so maybe that\u0027s not needed).",
      "range": {
        "startLine": 71,
        "startChar": 38,
        "endLine": 71,
        "endChar": 0
      },
      "revId": "6c5fcb3a0afdee5ded662442d156e275ea5590a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfc3277b_a62e04c7",
        "filename": "webrtc/modules/desktop_capture/screen_drawer_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1196069
      },
      "writtenOn": "2017-08-16T18:50:26Z",
      "side": 1,
      "message": "In general, spinning like this should be avoid, which seriously hurts performance. Instead, an advanced OS signal event should be used, usually it\u0027s a wait() / notify() pattern. But AFAICT, we do not have this kind of event in webrtc (like https://cs.chromium.org/chromium/src/base/synchronization/waitable_event.h?sq\u003dpackage:chromium\u0026dr in chromium).\nEven without signal event, this is also achievable by using a cross-thread lock: the lock should be able to be locked and unlocked in different threads. But unfortunately CriticalSection does not meet the requirement.\nSince this is just a test case, I won\u0027t bother writing more code to achieve the wait() / notify() pattern. Instead a spin wait is used here.\n\nIf you think it\u0027s useful, I can copy-paste the above explanation to the comment. Before that, I updated the comment to \"Wait for the lock to be created\" as you suggested.",
      "parentUuid": "dc27c9cb_f37f5818",
      "range": {
        "startLine": 71,
        "startChar": 38,
        "endLine": 71,
        "endChar": 0
      },
      "revId": "6c5fcb3a0afdee5ded662442d156e275ea5590a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b414120a_7474207b",
        "filename": "webrtc/modules/desktop_capture/screen_drawer_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 78,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-08-16T01:23:14Z",
      "side": 1,
      "message": "In theory, the thread could spin up and exit before you call this, in which case you\u0027re not actually testing that anything was locked. I think another ASSERT to ensure that \u003c100ms has passed before you call ctor() would address that.",
      "revId": "6c5fcb3a0afdee5ded662442d156e275ea5590a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5cf8d80_d1bbdf55",
        "filename": "webrtc/modules/desktop_capture/screen_drawer_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 78,
      "author": {
        "id": 1196069
      },
      "writtenOn": "2017-08-16T18:50:26Z",
      "side": 1,
      "message": "Ah, yes, that\u0027s expected. I believe tests of synchronization logic usually cannot catch all failures. But adding another ASSERT here is not safe: on low performance system, we cannot predict how much time needed before reaching this line.\nBut as long as we execute this test each time in presubmit, we will eventually catch the failure if there is one.",
      "parentUuid": "b414120a_7474207b",
      "revId": "6c5fcb3a0afdee5ded662442d156e275ea5590a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07ef29b5_e1166bf9",
        "filename": "webrtc/modules/desktop_capture/screen_drawer_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 134,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-08-16T01:23:14Z",
      "side": 1,
      "message": "What platforms is this not supported on? I think it would be better to explicitly ifdef this to run on the platforms on which it is supported, and perhaps add a test to ensure that ScreenDrawerLock::Create() returns null on other platforms (so that if it\u0027s ever implemented, the test will need to be updated to include it). Otherwise, Create could start returning null on a platform that is supposed to be supported, and there will be no test failure.",
      "range": {
        "startLine": 134,
        "startChar": 24,
        "endLine": 134,
        "endChar": 0
      },
      "revId": "6c5fcb3a0afdee5ded662442d156e275ea5590a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa0c3e7a_bab9de48",
        "filename": "webrtc/modules/desktop_capture/screen_drawer_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 134,
      "author": {
        "id": 1196069
      },
      "writtenOn": "2017-08-16T18:50:26Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "07ef29b5_e1166bf9",
      "range": {
        "startLine": 134,
        "startChar": 24,
        "endLine": 134,
        "endChar": 0
      },
      "revId": "6c5fcb3a0afdee5ded662442d156e275ea5590a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}